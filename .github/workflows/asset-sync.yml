name: Sync Assets to Azure

on:
  push:
    branches:
      - main
    paths:
      - 'public/**'

env:
  AZURE_STORAGE_ACCOUNT: eurusworkflows
  AZURE_CONTAINER_NAME: eurusworkflows
  # Temporarily disable Azure sync until credentials are fixed
  SKIP_AZURE_SYNC: true

jobs:
  sync-assets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check if Azure sync is enabled
        run: |
          if [ "$SKIP_AZURE_SYNC" = "true" ]; then
            echo "⚠️ Azure sync is temporarily disabled"
            echo "This is to prevent workflow failures while Azure credentials are being configured"
            echo "To enable Azure sync:"
            echo "1. Set up proper Azure credentials in GitHub secrets"
            echo "2. Remove or set SKIP_AZURE_SYNC=false in this workflow"
            exit 0
          fi

      - name: Check if Azure credentials exist
        run: |
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "❌ AZURE_CREDENTIALS secret is not set"
            echo "Please set up Azure credentials in GitHub repository secrets"
            exit 1
          else
            echo "✅ AZURE_CREDENTIALS secret is available"
          fi

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        continue-on-error: true
        id: azure_login

      - name: Check Azure Login Status
        run: |
          if [ "${{ steps.azure_login.outcome }}" != "success" ]; then
            echo "❌ Azure login failed"
            echo "This might be due to:"
            echo "1. Invalid Azure credentials"
            echo "2. Expired service principal"
            echo "3. Insufficient permissions"
            echo ""
            echo "Skipping Azure sync for now..."
            exit 0
          fi

      - name: Debug Azure Connection
        run: |
          echo "Testing Azure connection..."
          az account show || echo "Failed to show account"
          az storage account show --name $AZURE_STORAGE_ACCOUNT --resource-group $(az storage account list --query "[?name=='$AZURE_STORAGE_ACCOUNT'].resourceGroup" -o tsv) || echo "Failed to show storage account"

      - name: Upload Assets to Azure
        run: |
          # Check if public directory exists and has files
          if [ ! -d "public" ]; then
            echo "Public directory does not exist"
            exit 0
          fi

          file_count=$(find public -type f \( ! -name "*.html" -a ! -name ".gitkeep" \) | wc -l)
          echo "Found $file_count files to upload"

          if [ $file_count -eq 0 ]; then
            echo "No files found to upload"
            exit 0
          fi

          # Create mappings file
          > url-mappings.txt

          # Upload files with better error handling
          upload_failed=false
          find public -type f \( ! -name "*.html" -a ! -name ".gitkeep" \) | while read -r file; do
            relative_path=${file#public/}
            echo "Uploading $file..."
            
            # Upload file with retry logic
            for i in {1..3}; do
              if az storage blob upload \
                --account-name $AZURE_STORAGE_ACCOUNT \
                --container-name $AZURE_CONTAINER_NAME \
                --name "$relative_path" \
                --file "$file" \
                --auth-mode login \
                --overwrite true \
                --timeout 300; then
                
                # Get the URL
                url=$(az storage blob url \
                  --account-name $AZURE_STORAGE_ACCOUNT \
                  --container-name $AZURE_CONTAINER_NAME \
                  --name "$relative_path" \
                  --auth-mode login \
                  --output tsv)

                # Store the mapping
                echo "/$relative_path|$url" >> url-mappings.txt
                echo "✅ Successfully uploaded $file to $url"
                break
              else
                echo "❌ Failed to upload $file (attempt $i/3)"
                if [ $i -eq 3 ]; then
                  echo "Failed to upload $file after 3 attempts"
                  upload_failed=true
                fi
                sleep 5
              fi
            done
          done

          if [ "$upload_failed" = true ]; then
            echo "Some uploads failed, but continuing..."
          fi

      - name: Update Asset References
        run: |
          if [ ! -f "url-mappings.txt" ] || [ ! -s "url-mappings.txt" ]; then
            echo "No URL mappings file found or file is empty"
            exit 0
          fi

          # Update references in code
          while IFS='|' read -r old_path new_url; do
            # Remove any trailing whitespace
            old_path=$(echo "$old_path" | tr -d '[:space:]')
            new_url=$(echo "$new_url" | tr -d '[:space:]')
            
            echo "Replacing $old_path with $new_url"
            
            # Use find with grep to search for files containing the old path
            if find app/ components/ -type f -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" -o -name "*.css" 2>/dev/null | xargs grep -l "$old_path" 2>/dev/null; then
              find app/ components/ -type f -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" -o -name "*.css" 2>/dev/null | xargs grep -l "$old_path" 2>/dev/null | while read -r file; do
                # Replace the old path with the new URL
                sed -i "s|$old_path|$new_url|g" "$file"
                echo "Updated $file"
              done
            else
              echo "No files found containing $old_path"
            fi
          done < url-mappings.txt

      - name: Verify Upload (Optional)
        continue-on-error: true
        run: |
          if [ ! -f "url-mappings.txt" ] || [ ! -s "url-mappings.txt" ]; then
            echo "No URL mappings file found or file is empty"
            exit 0
          fi

          # Verify some files were uploaded (not all, to avoid timeout)
          count=0
          while IFS='|' read -r old_path new_url && [ $count -lt 5 ]; do
            echo "Verifying $new_url..."
            status_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$new_url")
            if [ "$status_code" = "200" ]; then
              echo "✅ Verified $new_url"
            else
              echo "⚠️ Could not verify $new_url (Status: $status_code)"
            fi
            count=$((count + 1))
          done < url-mappings.txt

      - name: Commit Changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: sync assets to Azure and update references [skip ci]"
            git push
          fi
